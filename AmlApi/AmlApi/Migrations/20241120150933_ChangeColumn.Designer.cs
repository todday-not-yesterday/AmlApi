// <auto-generated />
using System;
using AmlApi.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AmlApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241120150933_ChangeColumn")]
    partial class ChangeColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AmlApi.DataAccess.Entities.Branch", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Key"));

                    b.Property<string>("ClosingTime")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationKey")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OpeningTime")
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.HasIndex("LocationKey");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("AmlApi.DataAccess.Entities.Inventory", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Key"));

                    b.Property<string>("Author")
                        .HasColumnType("text");

                    b.Property<int>("BranchKey")
                        .HasColumnType("integer");

                    b.Property<int>("MediaTypeKey")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PublicationYear")
                        .HasColumnType("integer");

                    b.Property<int>("StockLevel")
                        .HasColumnType("integer");

                    b.HasKey("Key");

                    b.HasIndex("BranchKey");

                    b.HasIndex("MediaTypeKey");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("AmlApi.DataAccess.Entities.Location", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Key"));

                    b.Property<string>("AddressLineOne")
                        .HasColumnType("text");

                    b.Property<string>("AddressLineTwo")
                        .HasColumnType("text");

                    b.Property<int>("BuildingNumber")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("County")
                        .HasColumnType("text");

                    b.Property<string>("PostCode")
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("AmlApi.DataAccess.Entities.MediaType", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Key"));

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("MediaTypes");
                });

            modelBuilder.Entity("AmlApi.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Key"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NotificationStatusKey")
                        .HasColumnType("integer");

                    b.Property<int>("NotificationTypeKey")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SendAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserKey")
                        .HasColumnType("integer");

                    b.HasKey("Key");

                    b.HasIndex("NotificationStatusKey");

                    b.HasIndex("NotificationTypeKey");

                    b.HasIndex("UserKey");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("AmlApi.DataAccess.Entities.NotificationStatus", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Key"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("NotificationStatuses");
                });

            modelBuilder.Entity("AmlApi.DataAccess.Entities.NotificationType", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Key"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("AmlApi.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Key"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<bool>("Consent")
                        .HasColumnType("boolean");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PostCode")
                        .HasColumnType("text");

                    b.Property<int>("UserLevel")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AmlApi.DataAccess.Entities.UserInventory", b =>
                {
                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Key"));

                    b.Property<DateTime>("BorrowedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InventoryKey")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Returned")
                        .HasColumnType("boolean");

                    b.Property<int>("UserKey")
                        .HasColumnType("integer");

                    b.HasKey("Key");

                    b.HasIndex("InventoryKey");

                    b.HasIndex("UserKey");

                    b.ToTable("UserInventories");
                });

            modelBuilder.Entity("AmlApi.DataAccess.Entities.Branch", b =>
                {
                    b.HasOne("AmlApi.DataAccess.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("AmlApi.DataAccess.Entities.Inventory", b =>
                {
                    b.HasOne("AmlApi.DataAccess.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmlApi.DataAccess.Entities.MediaType", "MediaType")
                        .WithMany()
                        .HasForeignKey("MediaTypeKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("MediaType");
                });

            modelBuilder.Entity("AmlApi.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("AmlApi.DataAccess.Entities.NotificationStatus", "NotificationStatus")
                        .WithMany()
                        .HasForeignKey("NotificationStatusKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmlApi.DataAccess.Entities.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmlApi.DataAccess.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationStatus");

                    b.Navigation("NotificationType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AmlApi.DataAccess.Entities.UserInventory", b =>
                {
                    b.HasOne("AmlApi.DataAccess.Entities.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmlApi.DataAccess.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
